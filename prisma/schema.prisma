// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id        String     @id @default(cuid())
  name      String?
  password  String?
  email     String     @unique
  emailVerified String?
  role      String?
  image      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  accounts  Account[]
  sessions  Session[]
  posts     Post[]
  products     Product[]
  orders    Order[]
  reviews   Review[]
  blogPosts BlogPost[]
}

model Home {
  id        Int         @id @default(autoincrement())
  title     String?
  content   String?
  imageUrl  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  images    HomeImage[]
}

model OurRoot {
  id        Int             @id @default(autoincrement())
  title     String?
  content   String?
  imageUrl  String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  images    OurRootsImage[]
}

model Product {
  id          Int            @id @default(autoincrement())
  name    String
  description String?
  price       Float?
  countryCode Int?
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  orderItems  OrderItem[]
  reviews     Review[]
  images      ProductImage[]
}

model ContactUs {
  id           Int      @id @default(autoincrement())
  address      String?
  phone        String?
  email        String?
  openingHours String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      String
  orderDate   DateTime    @default(now())
  status      String?
  totalAmount Float?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Image {
  id             Int             @id @default(autoincrement())
  url            String
  altText        String?
  createdAt      DateTime        @default(now())
  homeImages     HomeImage[]
  ourRootsImages OurRootsImage[]
  productImages  ProductImage[]
  blogImages     BlogImage[]
}

model HomeImage {
  id        Int      @id @default(autoincrement())
  homeId    Int
  imageId   Int
  createdAt DateTime @default(now())
  home      Home     @relation(fields: [homeId], references: [id])
  image     Image    @relation(fields: [imageId], references: [id])
}

model OurRootsImage {
  id         Int      @id @default(autoincrement())
  ourRootsId Int
  imageId    Int
  createdAt  DateTime @default(now())
  ourRoots   OurRoot  @relation(fields: [ourRootsId], references: [id])
  image      Image    @relation(fields: [imageId], references: [id])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  imageId   Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  image     Image    @relation(fields: [imageId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Setting {
  id              Int      @id @default(autoincrement())
  siteTitle       String?
  metaDescription String?
  metaKeywords    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model BlogPost {
  id         Int         @id @default(autoincrement())
  title      String
  content    String
  authorId   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  author     User        @relation(fields: [authorId], references: [id])
  blogImages BlogImage[]
}

model BlogImage {
  id         Int      @id @default(autoincrement())
  blogPostId Int
  imageId    Int
  createdAt  DateTime @default(now())
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  image      Image    @relation(fields: [imageId], references: [id])
}
